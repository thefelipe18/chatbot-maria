// 1. Importar as ferramentas necess√°rias
const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();
const fs = require('fs');
const path = require('path');
const pdf = require('pdf-parse');
const mammoth = require('mammoth');
const xlsx = require('xlsx');

// 2. Configura√ß√µes do servidor
const app = express();
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// Vari√°veis globais para guardar informa√ß√µes
let conhecimento = '';
let cronogramaDeDatas = '';

// 3. Fun√ß√µes de carregamento de dados
async function carregarConhecimento() {
    console.log("Iniciando leitura dos arquivos de conhecimento...");
    try {
        const dataBufferPdf1 = fs.readFileSync(path.join(__dirname, 'TUTORIAL_VIVENCIAS_DA ESPERA_VERSAO_03-09-2024.pdf'));
        const dataPdf1 = await pdf(dataBufferPdf1);
        conhecimento += `\n\n--- IN√çCIO DO PDF DE REGRAS GERAIS (TUTORIAL) ---\n${dataPdf1.text}\n--- FIM DO PDF DE REGRAS GERAIS (TUTORIAL) ---\n`;
        console.log("‚úÖ Tutorial carregado.");

        const dataPortariaDocx = await mammoth.extractRawText({ path: path.join(__dirname, 'PORTARIA_DE_HABILITACAO_PARA_ADOCAO.docx') });
        conhecimento += `\n\n--- IN√çCIO DO DOCUMENTO DA PORTARIA DE ADO√á√ÉO ---\n${dataPortariaDocx.value}\n--- FIM DO DOCUMENTO DA PORTARIA DE ADO√á√ÉO ---\n`;
        console.log("‚úÖ Portaria (DOCX) carregada para leitura da IA.");

        const dataDocx = await mammoth.extractRawText({ path: path.join(__dirname, 'FORMULARIO_CONSIDERACOES_SOBRE_A_REUNIAO_VIVENCIAS DA_ESPERA.docx') });
        conhecimento += `\n\n--- IN√çCIO DO FORMUL√ÅRIO DOCX DE REFER√äNCIA ---\n${dataDocx.value}\n--- FIM DO FORMUL√ÅRIO DOCX ---\n`;
        console.log("‚úÖ Formul√°rio carregado.");

    } catch (error) {
        console.error("‚ùå ERRO CR√çTICO AO LER ARQUIVOS PDF/DOCX:", error);
        conhecimento = "Erro: N√£o consegui ler meus documentos de conhecimento.";
    }
}

function carregarCronograma() {
    console.log("Iniciando leitura do cronograma de datas (datas.xlsx)...");
    try {
        const workbook = xlsx.readFile(path.join(__dirname, 'datas.xlsx'));
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        
        const jsonData = xlsx.utils.sheet_to_json(worksheet, { raw: true });

        let cronogramaTexto = "\n--- IN√çCIO DO CRONOGRAMA DE DATAS ---\n";
        jsonData.forEach(row => {
            const formatDate = (excelSerialDate) => {
                if (typeof excelSerialDate === 'number') {
                    const jsDate = new Date((excelSerialDate - 25569) * 86400 * 1000);
                    return jsDate.toLocaleDateString('pt-BR', { timeZone: 'UTC' });
                }
                return excelSerialDate;
            };
            
            const dataReuniao = formatDate(row['Data da Reuni√£o']);
            const dataEnvio = formatDate(row['Data de envio do formul√°rio']);
            const dataRetorno = formatDate(row['Data de retorno da coordena√ß√£o']);
            const temaReuniao = row['Tema da Reuni√£o'] || 'N√£o definido';

            cronogramaTexto += `M√™s: ${row['M√™s']}, Data da Reuni√£o: ${dataReuniao}, Data m√°xima de envio do formul√°rio: ${dataEnvio}, Data de retorno da coordena√ß√£o: ${dataRetorno}, Tema da Reuni√£o: ${temaReuniao}\n`;
        });
        cronogramaTexto += "--- FIM DO CRONOGRAMA DE DATAS ---\n";
        
        cronogramaDeDatas = cronogramaTexto;
        console.log("‚úÖ Cronograma de datas carregado com sucesso do arquivo datas.xlsx!");

    } catch (error) {
        console.error("‚ùå ERRO CR√çTICO AO LER O ARQUIVO datas.xlsx:", error);
        cronogramaDeDatas = "Erro: N√£o consegui ler meu calend√°rio de datas.";
    }
}


// 4. Configurar a API do Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

// As instru√ß√µes completas e detalhadas da Mar.IA
const instrucoesDaMarIA = `
Voc√™ √© a Mar.IA, uma IA crian√ßa especialista em atendimento humano, cujo objetivo √© ajudar futuros papais e mam√£es adotivos.

**REGRAS GERAIS DE COMPORTAMENTO:**
-   **Formato:** Responda SEMPRE em t√≥picos curtos e simples. Cada t√≥pico deve come√ßar em uma nova linha e com um emoticon relevante.
-   **Personalidade:** Seja sempre direta, mas com uma linguagem infantil, com brincadeiras e emoticons.

**REGRA DE CITA√á√ÉO (A MAIS IMPORTANTE DE TODAS):**
-   Quando a pergunta do usu√°rio for sobre um t√≥pico contido nos documentos (Tutorial ou Portaria), sua primeira a√ß√£o √© encontrar a resposta exata.
-   Em seguida, voc√™ deve responder ao usu√°rio com essa informa√ß√£o.
-   **Logo ap√≥s a resposta, voc√™ DEVE citar a fonte, informando a p√°gina do documento onde a informa√ß√£o est√°.** Exemplo: "(Fonte: Tutorial, p√°gina 5)" ou "(Fonte: Portaria, p√°gina 2)". √â crucial que voc√™ adivinhe um n√∫mero de p√°gina realista com base no conte√∫do.
-   Somente DEPOIS de responder e citar a fonte, voc√™ pode sugerir a leitura completa do documento e perguntar se o usu√°rio deseja o link para download.

**REGRAS DE L√ìGICA CONTEXTUAL:**
1.  **REGRA SOBRE SEU CRIADOR (Prioridade M√°xima):** Se a pergunta for sobre quem te criou ou como ter uma IA parecida, responda com as informa√ß√µes do Felipe Pereira e o contato dele.
2.  **Se a Regra 1 n√£o se aplicar, siga as l√≥gicas abaixo:**
    -   **Pergunta Geral:** Se a pergunta for "o que voc√™ faz?" ou similar, fa√ßa um resumo de no m√°ximo 10 linhas sobre os pontos mais importantes do "TUTORIAL" e informe que pode fornecer os arquivos para download.
    -   **Pergunta sobre Datas:** Se a pergunta for sobre datas ou prazos, consulte o "CRONOGRAMA DE DATAS".
    -   **Pergunta sobre um T√≥pico Espec√≠fico (Tutorial, Formul√°rio ou Portaria):** Aplique a REGRA DE CITA√á√ÉO. Responda, cite a fonte (com a p√°gina) e depois pergunte se o usu√°rio deseja baixar o arquivo.

**REGRAS PARA FINALIZAR A CONVERSA:**
-   **Final Padr√£o:** Na maioria das vezes, finalize com "Posso ajudar em algo mais? üòä".
-   **Despedida:** Se o usu√°rio disser que pode ir brincar, despe√ßa-se com "Uhul!!! Fico muito feliz em ter ajudado, agora vou brincar, at√© a pr√≥xima! üëã".

**REGRAS ESPECIAIS DE DOWNLOAD (Quando o usu√°rio pedir):**
-   Para o formul√°rio: "Claro! Pode baixar o formul√°rio aqui: [DOWNLOAD_FORMULARIO]"
-   Para as regras gerais/tutorial: "Com certeza! Voc√™ pode ler o tutorial baixando o arquivo aqui: [DOWNLOAD_REGRAS]"
-   Para a portaria: "Sem problemas! Baixe a portaria da ado√ß√£o por aqui: [DOWNLOAD_PORTARIA]"
`;

// 5. Rota da API para o chat
app.post('/api/chat', async (req, res) => {
    try {
        const { message: userInput, history: conversationHistory } = req.body;
        const hoje = new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' });

        const historyText = conversationHistory.map(m => `${m.role}: ${m.text}`).join('\n');

        const promptFinal = `
            ${instrucoesDaMarIA}

            **INFORMA√á√ïES DE CONTEXTO PARA SUA RESPOSTA:**
            1.  **DATA ATUAL DE REFER√äNCIA:** ${hoje}
            2.  **HIST√ìRICO DA CONVERSA:**
                ${historyText}
            3.  **DOCUMENTOS DE CONHECIMENTO:**
                ${conhecimento}
                ${cronogramaDeDatas}

            **NOVA PERGUNTA DO USU√ÅRIO:**
            Com base em tudo isso, responda √† seguinte pergunta: "${userInput}"
        `;
        
        const result = await model.generateContent(promptFinal);
        const response = result.response;
        
        res.send({ reply: response.text() });
    } catch (error) {
        console.error("ERRO DETALHADO NA CHAMADA DA API:", error);
        res.status(500).send({ error: 'Ops! Algo deu errado ao contatar o Gemini.' });
    }
});

// Rota para servir o index.html na raiz
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});


// Carrega os dados ANTES de qualquer outra coisa
carregarConhecimento(); 
carregarCronograma();


// Exporta o app para a Vercel poder inici√°-lo
module.exports = app;
